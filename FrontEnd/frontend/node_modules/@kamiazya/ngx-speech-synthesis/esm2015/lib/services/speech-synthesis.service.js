/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class SpeechSynthesisService {
    constructor() {
        this.internal = window.speechSynthesis;
    }
    /**
     * This attribute is true if the queue for
     * the global SpeechSynthesis instance contains any utterances
     * which have not started speaking.
     * @return {?}
     */
    get pending() {
        return this.internal.pending;
    }
    /**
     * This attribute is true if an utterance is being spoken.
     * Specifically if an utterance has begun being spoken
     * and has not completed being spoken.
     * This is independent of whether the global SpeechSynthesis instance is
     * in the paused state.
     * @return {?}
     */
    get speaking() {
        return this.internal.speaking;
    }
    /**
     * This attribute is true when the global SpeechSynthesis instance is
     * in the paused state.
     * This state is independent of whether anything is in the queue.
     * The default state of a the global SpeechSynthesis instance
     * for a new window is the non-paused state.
     * @return {?}
     */
    get paused() {
        return this.internal.paused;
    }
    /**
     * Fired when the contents of the SpeechSynthesisVoiceList,
     * that the getVoices method will return, have changed.
     * Examples include: server-side synthesis where the list is determined asynchronously,
     * or when client-side voices are installed/uninstalled.
     * @param {?} handler
     * @return {?}
     */
    set onvoiceschanged(handler) {
        this.internal.onvoiceschanged = handler;
    }
    /**
     * This method appends the SpeechSynthesisUtterance object utterance
     * to the end of the queue for the global SpeechSynthesis instance.
     * It does not change the paused state of the SpeechSynthesis instance.
     * If the SpeechSynthesis instance is paused, it remains paused.
     * If it is not paused and no other utterances are in the queue,
     * then this utterance is spoken immediately, else this utterance is queued
     * to begin speaking after the other utterances in the queue have been spoken.
     * If changes are made to the SpeechSynthesisUtterance object after calling
     * this method and prior to the corresponding end or error event,
     * it is not defined whether those changes will affect what is spoken,
     * and those changes may cause an error to be returned.
     * The SpeechSynthesis object takes exclusive ownership of the SpeechSynthesisUtterance object.
     * Passing it as a speak() argument to another SpeechSynthesis object should throw an exception.
     * (For example, two frames may have the same origin and each will contain a SpeechSynthesis object.)
     * @param {?} utterance
     * @return {?}
     */
    speak(utterance) {
        this.internal.speak(utterance);
    }
    /**
     * This method removes all utterances from the queue.
     * If an utterance is being spoken, speaking ceases immediately.
     * This method does not change the paused state of the global SpeechSynthesis instance.
     * @return {?}
     */
    cancel() {
        this.internal.cancel();
    }
    /**
     * This method puts the global SpeechSynthesis instance into the paused state.
     * If an utterance was being spoken, it pauses mid-utterance.
     * (If called when the SpeechSynthesis instance was already in the paused state, it does nothing.)
     * @return {?}
     */
    pause() {
        this.internal.pause();
    }
    /**
     * This method puts the global SpeechSynthesis instance into the non-paused state.
     * If an utterance was speaking, it continues speaking the utterance
     * at the point at which it was paused, else it begins speaking
     * the next utterance in the queue (if any).
     * (If called when the SpeechSynthesis instance was already in the non-paused state, it does nothing.)
     * @return {?}
     */
    resume() {
        this.internal.resume();
    }
    /**
     * This method returns the available voices.
     * It is user agent dependent which voices are available.
     * If there are no voices available, or if the the list of available voices
     * is not yet known (for example: server-side synthesis where the list is determined asynchronously),
     * then this method must return a SpeechSynthesisVoiceList of length zero.
     * @return {?}
     */
    getVoices() {
        return this.internal.getVoices();
    }
}
SpeechSynthesisService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SpeechSynthesisService.ctorParameters = () => [];
/** @nocollapse */ SpeechSynthesisService.ngInjectableDef = i0.defineInjectable({ factory: function SpeechSynthesisService_Factory() { return new SpeechSynthesisService(); }, token: SpeechSynthesisService, providedIn: "root" });
if (false) {
    /**
     * If SpeechSynthesis API is supported
     * by the browser instance will be included.
     * @type {?}
     * @private
     */
    SpeechSynthesisService.prototype.internal;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWNoLXN5bnRoZXNpcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGthbWlhenlhL25neC1zcGVlY2gtc3ludGhlc2lzLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NwZWVjaC1zeW50aGVzaXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFPM0MsTUFBTSxPQUFPLHNCQUFzQjtJQVFqQztRQUNFLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQztJQUN6QyxDQUFDOzs7Ozs7O0lBUUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUMvQixDQUFDOzs7Ozs7Ozs7SUFTRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQ2hDLENBQUM7Ozs7Ozs7OztJQVNELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDOUIsQ0FBQzs7Ozs7Ozs7O0lBUUQsSUFBSSxlQUFlLENBQUMsT0FBa0M7UUFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDO0lBQzFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFrQk0sS0FBSyxDQUFDLFNBQW1DO1FBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7Ozs7SUFPTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7Ozs7O0lBT00sS0FBSztRQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7Ozs7Ozs7O0lBU00sTUFBTTtRQUNYLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7Ozs7Ozs7O0lBU00sU0FBUztRQUNkLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7WUFuSEYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7Ozs7Ozs7Ozs7SUFPQywwQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbnR5cGUgVm9pY2VzQ2hhbmdlZEV2ZW50SGFuZGxlciA9ICgodGhpczogU3BlZWNoU3ludGhlc2lzLCBldjogRXZlbnQpID0+IGFueSkgfCBudWxsO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBTcGVlY2hTeW50aGVzaXNTZXJ2aWNlIHtcblxuICAvKipcbiAgICogSWYgU3BlZWNoU3ludGhlc2lzIEFQSSBpcyBzdXBwb3J0ZWRcbiAgICogYnkgdGhlIGJyb3dzZXIgaW5zdGFuY2Ugd2lsbCBiZSBpbmNsdWRlZC5cbiAgICovXG4gIHByaXZhdGUgaW50ZXJuYWw6IFNwZWVjaFN5bnRoZXNpcztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmludGVybmFsID0gd2luZG93LnNwZWVjaFN5bnRoZXNpcztcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRoaXMgYXR0cmlidXRlIGlzIHRydWUgaWYgdGhlIHF1ZXVlIGZvclxuICAgKiB0aGUgZ2xvYmFsIFNwZWVjaFN5bnRoZXNpcyBpbnN0YW5jZSBjb250YWlucyBhbnkgdXR0ZXJhbmNlc1xuICAgKiB3aGljaCBoYXZlIG5vdCBzdGFydGVkIHNwZWFraW5nLlxuICAgKi9cbiAgZ2V0IHBlbmRpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJuYWwucGVuZGluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGF0dHJpYnV0ZSBpcyB0cnVlIGlmIGFuIHV0dGVyYW5jZSBpcyBiZWluZyBzcG9rZW4uXG4gICAqIFNwZWNpZmljYWxseSBpZiBhbiB1dHRlcmFuY2UgaGFzIGJlZ3VuIGJlaW5nIHNwb2tlblxuICAgKiBhbmQgaGFzIG5vdCBjb21wbGV0ZWQgYmVpbmcgc3Bva2VuLlxuICAgKiBUaGlzIGlzIGluZGVwZW5kZW50IG9mIHdoZXRoZXIgdGhlIGdsb2JhbCBTcGVlY2hTeW50aGVzaXMgaW5zdGFuY2UgaXNcbiAgICogaW4gdGhlIHBhdXNlZCBzdGF0ZS5cbiAgICovXG4gIGdldCBzcGVha2luZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcm5hbC5zcGVha2luZztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGF0dHJpYnV0ZSBpcyB0cnVlIHdoZW4gdGhlIGdsb2JhbCBTcGVlY2hTeW50aGVzaXMgaW5zdGFuY2UgaXNcbiAgICogaW4gdGhlIHBhdXNlZCBzdGF0ZS5cbiAgICogVGhpcyBzdGF0ZSBpcyBpbmRlcGVuZGVudCBvZiB3aGV0aGVyIGFueXRoaW5nIGlzIGluIHRoZSBxdWV1ZS5cbiAgICogVGhlIGRlZmF1bHQgc3RhdGUgb2YgYSB0aGUgZ2xvYmFsIFNwZWVjaFN5bnRoZXNpcyBpbnN0YW5jZVxuICAgKiBmb3IgYSBuZXcgd2luZG93IGlzIHRoZSBub24tcGF1c2VkIHN0YXRlLlxuICAgKi9cbiAgZ2V0IHBhdXNlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcm5hbC5wYXVzZWQ7XG4gIH1cblxuICAvKipcbiAgICogRmlyZWQgd2hlbiB0aGUgY29udGVudHMgb2YgdGhlIFNwZWVjaFN5bnRoZXNpc1ZvaWNlTGlzdCxcbiAgICogdGhhdCB0aGUgZ2V0Vm9pY2VzIG1ldGhvZCB3aWxsIHJldHVybiwgaGF2ZSBjaGFuZ2VkLlxuICAgKiBFeGFtcGxlcyBpbmNsdWRlOiBzZXJ2ZXItc2lkZSBzeW50aGVzaXMgd2hlcmUgdGhlIGxpc3QgaXMgZGV0ZXJtaW5lZCBhc3luY2hyb25vdXNseSxcbiAgICogb3Igd2hlbiBjbGllbnQtc2lkZSB2b2ljZXMgYXJlIGluc3RhbGxlZC91bmluc3RhbGxlZC5cbiAgICovXG4gIHNldCBvbnZvaWNlc2NoYW5nZWQoaGFuZGxlcjogVm9pY2VzQ2hhbmdlZEV2ZW50SGFuZGxlcikge1xuICAgIHRoaXMuaW50ZXJuYWwub252b2ljZXNjaGFuZ2VkID0gaGFuZGxlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBhcHBlbmRzIHRoZSBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2Ugb2JqZWN0IHV0dGVyYW5jZVxuICAgKiB0byB0aGUgZW5kIG9mIHRoZSBxdWV1ZSBmb3IgdGhlIGdsb2JhbCBTcGVlY2hTeW50aGVzaXMgaW5zdGFuY2UuXG4gICAqIEl0IGRvZXMgbm90IGNoYW5nZSB0aGUgcGF1c2VkIHN0YXRlIG9mIHRoZSBTcGVlY2hTeW50aGVzaXMgaW5zdGFuY2UuXG4gICAqIElmIHRoZSBTcGVlY2hTeW50aGVzaXMgaW5zdGFuY2UgaXMgcGF1c2VkLCBpdCByZW1haW5zIHBhdXNlZC5cbiAgICogSWYgaXQgaXMgbm90IHBhdXNlZCBhbmQgbm8gb3RoZXIgdXR0ZXJhbmNlcyBhcmUgaW4gdGhlIHF1ZXVlLFxuICAgKiB0aGVuIHRoaXMgdXR0ZXJhbmNlIGlzIHNwb2tlbiBpbW1lZGlhdGVseSwgZWxzZSB0aGlzIHV0dGVyYW5jZSBpcyBxdWV1ZWRcbiAgICogdG8gYmVnaW4gc3BlYWtpbmcgYWZ0ZXIgdGhlIG90aGVyIHV0dGVyYW5jZXMgaW4gdGhlIHF1ZXVlIGhhdmUgYmVlbiBzcG9rZW4uXG4gICAqIElmIGNoYW5nZXMgYXJlIG1hZGUgdG8gdGhlIFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSBvYmplY3QgYWZ0ZXIgY2FsbGluZ1xuICAgKiB0aGlzIG1ldGhvZCBhbmQgcHJpb3IgdG8gdGhlIGNvcnJlc3BvbmRpbmcgZW5kIG9yIGVycm9yIGV2ZW50LFxuICAgKiBpdCBpcyBub3QgZGVmaW5lZCB3aGV0aGVyIHRob3NlIGNoYW5nZXMgd2lsbCBhZmZlY3Qgd2hhdCBpcyBzcG9rZW4sXG4gICAqIGFuZCB0aG9zZSBjaGFuZ2VzIG1heSBjYXVzZSBhbiBlcnJvciB0byBiZSByZXR1cm5lZC5cbiAgICogVGhlIFNwZWVjaFN5bnRoZXNpcyBvYmplY3QgdGFrZXMgZXhjbHVzaXZlIG93bmVyc2hpcCBvZiB0aGUgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlIG9iamVjdC5cbiAgICogUGFzc2luZyBpdCBhcyBhIHNwZWFrKCkgYXJndW1lbnQgdG8gYW5vdGhlciBTcGVlY2hTeW50aGVzaXMgb2JqZWN0IHNob3VsZCB0aHJvdyBhbiBleGNlcHRpb24uXG4gICAqIChGb3IgZXhhbXBsZSwgdHdvIGZyYW1lcyBtYXkgaGF2ZSB0aGUgc2FtZSBvcmlnaW4gYW5kIGVhY2ggd2lsbCBjb250YWluIGEgU3BlZWNoU3ludGhlc2lzIG9iamVjdC4pXG4gICAqL1xuICBwdWJsaWMgc3BlYWsodXR0ZXJhbmNlOiBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UpOiB2b2lkIHtcbiAgICB0aGlzLmludGVybmFsLnNwZWFrKHV0dGVyYW5jZSk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcmVtb3ZlcyBhbGwgdXR0ZXJhbmNlcyBmcm9tIHRoZSBxdWV1ZS5cbiAgICogSWYgYW4gdXR0ZXJhbmNlIGlzIGJlaW5nIHNwb2tlbiwgc3BlYWtpbmcgY2Vhc2VzIGltbWVkaWF0ZWx5LlxuICAgKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBjaGFuZ2UgdGhlIHBhdXNlZCBzdGF0ZSBvZiB0aGUgZ2xvYmFsIFNwZWVjaFN5bnRoZXNpcyBpbnN0YW5jZS5cbiAgICovXG4gIHB1YmxpYyBjYW5jZWwoKTogdm9pZCB7XG4gICAgdGhpcy5pbnRlcm5hbC5jYW5jZWwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwdXRzIHRoZSBnbG9iYWwgU3BlZWNoU3ludGhlc2lzIGluc3RhbmNlIGludG8gdGhlIHBhdXNlZCBzdGF0ZS5cbiAgICogSWYgYW4gdXR0ZXJhbmNlIHdhcyBiZWluZyBzcG9rZW4sIGl0IHBhdXNlcyBtaWQtdXR0ZXJhbmNlLlxuICAgKiAoSWYgY2FsbGVkIHdoZW4gdGhlIFNwZWVjaFN5bnRoZXNpcyBpbnN0YW5jZSB3YXMgYWxyZWFkeSBpbiB0aGUgcGF1c2VkIHN0YXRlLCBpdCBkb2VzIG5vdGhpbmcuKVxuICAgKi9cbiAgcHVibGljIHBhdXNlKCk6IHZvaWQge1xuICAgIHRoaXMuaW50ZXJuYWwucGF1c2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwdXRzIHRoZSBnbG9iYWwgU3BlZWNoU3ludGhlc2lzIGluc3RhbmNlIGludG8gdGhlIG5vbi1wYXVzZWQgc3RhdGUuXG4gICAqIElmIGFuIHV0dGVyYW5jZSB3YXMgc3BlYWtpbmcsIGl0IGNvbnRpbnVlcyBzcGVha2luZyB0aGUgdXR0ZXJhbmNlXG4gICAqIGF0IHRoZSBwb2ludCBhdCB3aGljaCBpdCB3YXMgcGF1c2VkLCBlbHNlIGl0IGJlZ2lucyBzcGVha2luZ1xuICAgKiB0aGUgbmV4dCB1dHRlcmFuY2UgaW4gdGhlIHF1ZXVlIChpZiBhbnkpLlxuICAgKiAoSWYgY2FsbGVkIHdoZW4gdGhlIFNwZWVjaFN5bnRoZXNpcyBpbnN0YW5jZSB3YXMgYWxyZWFkeSBpbiB0aGUgbm9uLXBhdXNlZCBzdGF0ZSwgaXQgZG9lcyBub3RoaW5nLilcbiAgICovXG4gIHB1YmxpYyByZXN1bWUoKTogdm9pZCB7XG4gICAgdGhpcy5pbnRlcm5hbC5yZXN1bWUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBhdmFpbGFibGUgdm9pY2VzLlxuICAgKiBJdCBpcyB1c2VyIGFnZW50IGRlcGVuZGVudCB3aGljaCB2b2ljZXMgYXJlIGF2YWlsYWJsZS5cbiAgICogSWYgdGhlcmUgYXJlIG5vIHZvaWNlcyBhdmFpbGFibGUsIG9yIGlmIHRoZSB0aGUgbGlzdCBvZiBhdmFpbGFibGUgdm9pY2VzXG4gICAqIGlzIG5vdCB5ZXQga25vd24gKGZvciBleGFtcGxlOiBzZXJ2ZXItc2lkZSBzeW50aGVzaXMgd2hlcmUgdGhlIGxpc3QgaXMgZGV0ZXJtaW5lZCBhc3luY2hyb25vdXNseSksXG4gICAqIHRoZW4gdGhpcyBtZXRob2QgbXVzdCByZXR1cm4gYSBTcGVlY2hTeW50aGVzaXNWb2ljZUxpc3Qgb2YgbGVuZ3RoIHplcm8uXG4gICAqL1xuICBwdWJsaWMgZ2V0Vm9pY2VzKCk6IFNwZWVjaFN5bnRoZXNpc1ZvaWNlW10ge1xuICAgIHJldHVybiB0aGlzLmludGVybmFsLmdldFZvaWNlcygpO1xuICB9XG59XG4iXX0=