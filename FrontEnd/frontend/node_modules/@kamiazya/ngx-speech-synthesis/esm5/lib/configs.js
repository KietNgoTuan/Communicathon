/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/**
 * @record
 */
export function SpeechSynthesisUtteranceParams() { }
if (false) {
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceParams.prototype.lang;
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceParams.prototype.pitch;
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceParams.prototype.rate;
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceParams.prototype.text;
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceParams.prototype.voice;
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceParams.prototype.volume;
}
/**
 * @record
 */
export function SpeechSynthesisUtteranceConfig() { }
if (false) {
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceConfig.prototype.onboundary;
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceConfig.prototype.onend;
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceConfig.prototype.onerror;
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceConfig.prototype.onmark;
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceConfig.prototype.onpause;
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceConfig.prototype.onresume;
    /** @type {?|undefined} */
    SpeechSynthesisUtteranceConfig.prototype.onstart;
}
/** @type {?} */
export var Lang = new InjectionToken('speech-synthesis.lang');
/** @type {?} */
export var Voice = new InjectionToken('speech-synthesis.voice');
/** @type {?} */
export var Volume = new InjectionToken('speech-synthesis.volume');
/** @type {?} */
export var Rate = new InjectionToken('speech-synthesis.rate');
/** @type {?} */
export var Pitch = new InjectionToken('speech-synthesis.pitch');
/** @type {?} */
export var OnStartHandler = new InjectionToken('speech-synthesis.onstart');
/** @type {?} */
export var OnEndHandler = new InjectionToken('speech-synthesis.onend');
/** @type {?} */
export var OnErrorHandler = new InjectionToken('speech-synthesis.onerror');
/** @type {?} */
export var OnPauseHandler = new InjectionToken('speech-synthesis.onpause');
/** @type {?} */
export var OnResumeHandler = new InjectionToken('speech-synthesis.onresume');
/** @type {?} */
export var OnMarkHandler = new InjectionToken('speech-synthesis.onmark');
/** @type {?} */
export var OnBoundaryHandler = new InjectionToken('speech-synthesis.onboundary');
/** @type {?} */
export var Params = new InjectionToken('speech-synthesis.params');
/** @type {?} */
export var Config = new InjectionToken('speech-synthesis.config');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlncy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrYW1pYXp5YS9uZ3gtc3BlZWNoLXN5bnRoZXNpcy8iLCJzb3VyY2VzIjpbImxpYi9jb25maWdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBTS9DLG9EQU9DOzs7SUFOQyw4Q0FBYzs7SUFDZCwrQ0FBZTs7SUFDZiw4Q0FBYzs7SUFDZCw4Q0FBYzs7SUFDZCwrQ0FBNkI7O0lBQzdCLGdEQUFnQjs7Ozs7QUFHbEIsb0RBUUM7OztJQVBDLG9EQUFrRDs7SUFDbEQsK0NBQTZDOztJQUM3QyxpREFBb0Q7O0lBQ3BELGdEQUE4Qzs7SUFDOUMsaURBQStDOztJQUMvQyxrREFBZ0Q7O0lBQ2hELGlEQUErQzs7O0FBSWpELE1BQU0sS0FBTyxJQUFJLEdBQWdCLElBQUksY0FBYyxDQUFTLHVCQUF1QixDQUFDOztBQUNwRixNQUFNLEtBQU8sS0FBSyxHQUFlLElBQUksY0FBYyxDQUFnQyx3QkFBd0IsQ0FBQzs7QUFDNUcsTUFBTSxLQUFPLE1BQU0sR0FBYyxJQUFJLGNBQWMsQ0FBUyx5QkFBeUIsQ0FBQzs7QUFDdEYsTUFBTSxLQUFPLElBQUksR0FBZ0IsSUFBSSxjQUFjLENBQVUsdUJBQXVCLENBQUM7O0FBQ3JGLE1BQU0sS0FBTyxLQUFLLEdBQWUsSUFBSSxjQUFjLENBQVMsd0JBQXdCLENBQUM7O0FBQ3JGLE1BQU0sS0FBTyxjQUFjLEdBQU0sSUFBSSxjQUFjLENBQXVDLDBCQUEwQixDQUFDOztBQUNySCxNQUFNLEtBQU8sWUFBWSxHQUFRLElBQUksY0FBYyxDQUF1Qyx3QkFBd0IsQ0FBQzs7QUFDbkgsTUFBTSxLQUFPLGNBQWMsR0FBTSxJQUFJLGNBQWMsQ0FBNEMsMEJBQTBCLENBQUM7O0FBQzFILE1BQU0sS0FBTyxjQUFjLEdBQU0sSUFBSSxjQUFjLENBQXVDLDBCQUEwQixDQUFDOztBQUNySCxNQUFNLEtBQU8sZUFBZSxHQUFLLElBQUksY0FBYyxDQUF1QywyQkFBMkIsQ0FBQzs7QUFDdEgsTUFBTSxLQUFPLGFBQWEsR0FBTyxJQUFJLGNBQWMsQ0FBdUMseUJBQXlCLENBQUM7O0FBQ3BILE1BQU0sS0FBTyxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FBdUMsNkJBQTZCLENBQUM7O0FBQ3hILE1BQU0sS0FBTyxNQUFNLEdBQWMsSUFBSSxjQUFjLENBQWlDLHlCQUF5QixDQUFDOztBQUM5RyxNQUFNLEtBQU8sTUFBTSxHQUFjLElBQUksY0FBYyxDQUFpQyx5QkFBeUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZUV2ZW50SGFuZGxlciA9ICgodGhpczogU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLCBldjogU3BlZWNoU3ludGhlc2lzRXZlbnQpID0+IGFueSkgfCBudWxsO1xuXG5leHBvcnQgdHlwZSBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2VFcnJvckV2ZW50SGFuZGxlciA9ICgodGhpczogU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLCBldjogU3BlZWNoU3ludGhlc2lzRXJyb3JFdmVudCkgPT4gYW55KSB8IG51bGw7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlUGFyYW1zIHtcbiAgbGFuZz86IHN0cmluZztcbiAgcGl0Y2g/OiBudW1iZXI7XG4gIHJhdGU/OiBudW1iZXI7XG4gIHRleHQ/OiBzdHJpbmc7XG4gIHZvaWNlPzogU3BlZWNoU3ludGhlc2lzVm9pY2U7XG4gIHZvbHVtZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2VDb25maWcgZXh0ZW5kcyBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2VQYXJhbXMge1xuICBvbmJvdW5kYXJ5PzogU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlRXZlbnRIYW5kbGVyO1xuICBvbmVuZD86IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZUV2ZW50SGFuZGxlcjtcbiAgb25lcnJvcj86IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZUVycm9yRXZlbnRIYW5kbGVyO1xuICBvbm1hcms/OiBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2VFdmVudEhhbmRsZXI7XG4gIG9ucGF1c2U/OiBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2VFdmVudEhhbmRsZXI7XG4gIG9ucmVzdW1lPzogU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlRXZlbnRIYW5kbGVyO1xuICBvbnN0YXJ0PzogU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlRXZlbnRIYW5kbGVyO1xufVxuXG5cbmV4cG9ydCBjb25zdCBMYW5nICAgICAgICAgICAgICA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdzcGVlY2gtc3ludGhlc2lzLmxhbmcnKTtcbmV4cG9ydCBjb25zdCBWb2ljZSAgICAgICAgICAgICA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmcgfCBTcGVlY2hTeW50aGVzaXNWb2ljZT4oJ3NwZWVjaC1zeW50aGVzaXMudm9pY2UnKTtcbmV4cG9ydCBjb25zdCBWb2x1bWUgICAgICAgICAgICA9IG5ldyBJbmplY3Rpb25Ub2tlbjxudW1iZXI+KCdzcGVlY2gtc3ludGhlc2lzLnZvbHVtZScpO1xuZXhwb3J0IGNvbnN0IFJhdGUgICAgICAgICAgICAgID0gbmV3IEluamVjdGlvblRva2VuPGJvb2xlYW4+KCdzcGVlY2gtc3ludGhlc2lzLnJhdGUnKTtcbmV4cG9ydCBjb25zdCBQaXRjaCAgICAgICAgICAgICA9IG5ldyBJbmplY3Rpb25Ub2tlbjxudW1iZXI+KCdzcGVlY2gtc3ludGhlc2lzLnBpdGNoJyk7XG5leHBvcnQgY29uc3QgT25TdGFydEhhbmRsZXIgICAgPSBuZXcgSW5qZWN0aW9uVG9rZW48U3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlRXZlbnRIYW5kbGVyPignc3BlZWNoLXN5bnRoZXNpcy5vbnN0YXJ0Jyk7XG5leHBvcnQgY29uc3QgT25FbmRIYW5kbGVyICAgICAgPSBuZXcgSW5qZWN0aW9uVG9rZW48U3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlRXZlbnRIYW5kbGVyPignc3BlZWNoLXN5bnRoZXNpcy5vbmVuZCcpO1xuZXhwb3J0IGNvbnN0IE9uRXJyb3JIYW5kbGVyICAgID0gbmV3IEluamVjdGlvblRva2VuPFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZUVycm9yRXZlbnRIYW5kbGVyPignc3BlZWNoLXN5bnRoZXNpcy5vbmVycm9yJyk7XG5leHBvcnQgY29uc3QgT25QYXVzZUhhbmRsZXIgICAgPSBuZXcgSW5qZWN0aW9uVG9rZW48U3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlRXZlbnRIYW5kbGVyPignc3BlZWNoLXN5bnRoZXNpcy5vbnBhdXNlJyk7XG5leHBvcnQgY29uc3QgT25SZXN1bWVIYW5kbGVyICAgPSBuZXcgSW5qZWN0aW9uVG9rZW48U3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlRXZlbnRIYW5kbGVyPignc3BlZWNoLXN5bnRoZXNpcy5vbnJlc3VtZScpO1xuZXhwb3J0IGNvbnN0IE9uTWFya0hhbmRsZXIgICAgID0gbmV3IEluamVjdGlvblRva2VuPFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZUV2ZW50SGFuZGxlcj4oJ3NwZWVjaC1zeW50aGVzaXMub25tYXJrJyk7XG5leHBvcnQgY29uc3QgT25Cb3VuZGFyeUhhbmRsZXIgPSBuZXcgSW5qZWN0aW9uVG9rZW48U3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlRXZlbnRIYW5kbGVyPignc3BlZWNoLXN5bnRoZXNpcy5vbmJvdW5kYXJ5Jyk7XG5leHBvcnQgY29uc3QgUGFyYW1zICAgICAgICAgICAgPSBuZXcgSW5qZWN0aW9uVG9rZW48U3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlUGFyYW1zPignc3BlZWNoLXN5bnRoZXNpcy5wYXJhbXMnKTtcbmV4cG9ydCBjb25zdCBDb25maWcgICAgICAgICAgICA9IG5ldyBJbmplY3Rpb25Ub2tlbjxTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2VDb25maWc+KCdzcGVlY2gtc3ludGhlc2lzLmNvbmZpZycpO1xuIl19