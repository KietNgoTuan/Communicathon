/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { Lang, Voice, Volume, Rate, Pitch, OnStartHandler, OnEndHandler, OnErrorHandler, OnPauseHandler, OnResumeHandler, OnMarkHandler, OnBoundaryHandler, Config, } from '../configs';
import * as i0 from "@angular/core";
import * as i1 from "../configs";
/**
 * \@dynamic
 */
var SpeechSynthesisUtteranceFactoryService = /** @class */ (function () {
    function SpeechSynthesisUtteranceFactoryService(config, 
    /**
     * This attribute specifies the language of the speech synthesis for the utterance,
     * using a valid BCP 47 language tag.
     * [BCP47] If unset it remains unset for getting in script,
     * but will default to use the language of the html document root element and associated hierarchy.
     * This default value is computed and used when the input request opens a connection
     * to the recognition service.
     */
    lang, 
    /**
     * This attribute specifies the speech synthesis voice that the web application wishes to use.
     * When a SpeechSynthesisUtterance object is created this attribute must be initialized to null.
     * If, at the time of the speak() method call,
     * this attribute has been set to one of the SpeechSynthesisVoice objects returned by getVoices(),
     * then the user agent must use that voice. If this attribute is unset or null at the time of the speak()
     * method call, then the user agent must use a user agent default voice.
     * The user agent default voice should support the current language (see lang) and
     * can be a local or remote speech service and can incorporate end user choices via interfaces
     * provided by the user agent such as browser configuration parameters.
     */
    voice, 
    /**
     * This attribute specifies the speaking volume for the utterance.
     * It ranges between 0 and 1 inclusive, with 0 being the lowest volume and 1 the highest volume,
     * with a default of 1. If SSML is used, this value will be overridden by prosody tags in the markup.
     */
    volume, 
    /**
     * This attribute specifies the speaking rate for the utterance.
     * It is relative to the default rate for this voice.
     * 1 is the default rate supported by the speech synthesis engine or specific voice
     * (which should correspond to a normal speaking rate).
     * 2 is twice as fast, and 0.5 is half as fast. Values below 0.1 or above 10 are strictly disallowed,
     * but speech synthesis engines or specific voices may constrain the minimum and maximum rates further,
     * for example, a particular voice may not actually speak faster than 3 times normal
     * even if you specify a value larger than 3.
     * If SSML is used, this value will be overridden by prosody tags in the markup.
     */
    rate, 
    /**
     * This attribute specifies the speaking pitch for the utterance.
     * It ranges between 0 and 2 inclusive, with 0 being the lowest pitch and 2 the highest pitch.
     * 1 corresponds to the default pitch of the speech synthesis engine or specific voice.
     * Speech synthesis engines or voices may constrain the minimum and maximum rates further.
     * If SSML is used, this value will be overridden by prosody tags in the markup.
     */
    pitch, 
    /**
     * Fired when this utterance has begun to be spoken.
     */
    onstart, 
    /**
     * Fired when this utterance has completed being spoken. If this event fires,
     * the error event must not be fired for this utterance.
     */
    onend, 
    /**
     * Fired if there was an error that prevented successful speaking of this utterance.
     * If this event fires, the end event must not be fired for this utterance.
     */
    onerror, 
    /**
     * Fired when and if this utterance is paused mid-utterance.
     */
    onpause, 
    /**
     * Fired when and if this utterance is resumed after being paused mid-utterance.
     * Adding the utterance to the queue while the global SpeechSynthesis instance is in the paused state,
     * and then calling the resume method does not cause the resume event to be fired,
     * in this case the utteranceâ€™s start event will be called when the utterance starts.
     */
    onresume, 
    /**
     * Fired when the spoken utterance reaches a named "mark" tag in SSML.
     * [SSML] The user agent must fire this event if the speech synthesis engine provides the event.
     */
    onmark, 
    /**
     * Fired when the spoken utterance reaches a word or sentence boundary.
     * The user agent must fire this event if the speech synthesis engine provides the event.
     */
    onboundary) {
        var _this = this;
        this.internal = window.speechSynthesis;
        this._config = config;
        this._lang = lang;
        if (typeof voice === 'string') {
            this.internal
                .addEventListener('voiceschanged', function () {
                _this._voice = _this.internal
                    .getVoices().find(function (v) { return v.name === voice; });
            });
        }
        else {
            this._voice = voice;
        }
        this._volume = volume;
        this._rate = rate;
        this._pitch = pitch;
        this._onstart = onstart;
        this._onend = onend;
        this._onerror = onerror;
        this._onpause = onpause;
        this._onresume = onresume;
        this._onmark = onmark;
        this._onboundary = onboundary;
    }
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "lang", {
        /**
         * This attribute specifies the language of the speech synthesis for the utterance,
         * using a valid BCP 47 language tag.
         * [BCP47] If unset it remains unset for getting in script,
         * but will default to use the language of the html document root element and associated hierarchy.
         * This default value is computed and used when the input request opens a connection
         * to the recognition service.
         */
        get: /**
         * This attribute specifies the language of the speech synthesis for the utterance,
         * using a valid BCP 47 language tag.
         * [BCP47] If unset it remains unset for getting in script,
         * but will default to use the language of the html document root element and associated hierarchy.
         * This default value is computed and used when the input request opens a connection
         * to the recognition service.
         * @return {?}
         */
        function () {
            return this._lang || this._config.lang;
        },
        set: /**
         * @param {?} lang
         * @return {?}
         */
        function (lang) {
            this._lang = lang;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "voice", {
        /**
         * This attribute specifies the speech synthesis voice that the web application wishes to use.
         * When a SpeechSynthesisUtterance object is created this attribute must be initialized to null.
         * If, at the time of the speak() method call,
         * this attribute has been set to one of the SpeechSynthesisVoice objects returned by getVoices(),
         * then the user agent must use that voice. If this attribute is unset or null at the time of the speak()
         * method call, then the user agent must use a user agent default voice.
         * The user agent default voice should support the current language (see lang) and
         * can be a local or remote speech service and can incorporate end user choices via interfaces
         * provided by the user agent such as browser configuration parameters.
         */
        get: /**
         * This attribute specifies the speech synthesis voice that the web application wishes to use.
         * When a SpeechSynthesisUtterance object is created this attribute must be initialized to null.
         * If, at the time of the speak() method call,
         * this attribute has been set to one of the SpeechSynthesisVoice objects returned by getVoices(),
         * then the user agent must use that voice. If this attribute is unset or null at the time of the speak()
         * method call, then the user agent must use a user agent default voice.
         * The user agent default voice should support the current language (see lang) and
         * can be a local or remote speech service and can incorporate end user choices via interfaces
         * provided by the user agent such as browser configuration parameters.
         * @return {?}
         */
        function () {
            return this._voice || this._config.voice;
        },
        set: /**
         * @param {?} voice
         * @return {?}
         */
        function (voice) {
            this._voice = voice;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "volume", {
        /**
         * This attribute specifies the speaking volume for the utterance.
         * It ranges between 0 and 1 inclusive, with 0 being the lowest volume and 1 the highest volume,
         * with a default of 1. If SSML is used, this value will be overridden by prosody tags in the markup.
         */
        get: /**
         * This attribute specifies the speaking volume for the utterance.
         * It ranges between 0 and 1 inclusive, with 0 being the lowest volume and 1 the highest volume,
         * with a default of 1. If SSML is used, this value will be overridden by prosody tags in the markup.
         * @return {?}
         */
        function () {
            return this._volume || this._config.volume;
        },
        set: /**
         * @param {?} volume
         * @return {?}
         */
        function (volume) {
            this._volume = volume;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "rate", {
        /**
         * This attribute specifies the speaking rate for the utterance.
         * It is relative to the default rate for this voice.
         * 1 is the default rate supported by the speech synthesis engine or specific voice
         * (which should correspond to a normal speaking rate).
         * 2 is twice as fast, and 0.5 is half as fast. Values below 0.1 or above 10 are strictly disallowed,
         * but speech synthesis engines or specific voices may constrain the minimum and maximum rates further,
         * for example, a particular voice may not actually speak faster than 3 times normal
         * even if you specify a value larger than 3.
         * If SSML is used, this value will be overridden by prosody tags in the markup.
         */
        get: /**
         * This attribute specifies the speaking rate for the utterance.
         * It is relative to the default rate for this voice.
         * 1 is the default rate supported by the speech synthesis engine or specific voice
         * (which should correspond to a normal speaking rate).
         * 2 is twice as fast, and 0.5 is half as fast. Values below 0.1 or above 10 are strictly disallowed,
         * but speech synthesis engines or specific voices may constrain the minimum and maximum rates further,
         * for example, a particular voice may not actually speak faster than 3 times normal
         * even if you specify a value larger than 3.
         * If SSML is used, this value will be overridden by prosody tags in the markup.
         * @return {?}
         */
        function () {
            return this._rate || this._config.rate;
        },
        set: /**
         * @param {?} rate
         * @return {?}
         */
        function (rate) {
            this._rate = rate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "pitch", {
        /**
         * This attribute specifies the speaking pitch for the utterance.
         * It ranges between 0 and 2 inclusive, with 0 being the lowest pitch and 2 the highest pitch.
         * 1 corresponds to the default pitch of the speech synthesis engine or specific voice.
         * Speech synthesis engines or voices may constrain the minimum and maximum rates further.
         * If SSML is used, this value will be overridden by prosody tags in the markup.
         */
        get: /**
         * This attribute specifies the speaking pitch for the utterance.
         * It ranges between 0 and 2 inclusive, with 0 being the lowest pitch and 2 the highest pitch.
         * 1 corresponds to the default pitch of the speech synthesis engine or specific voice.
         * Speech synthesis engines or voices may constrain the minimum and maximum rates further.
         * If SSML is used, this value will be overridden by prosody tags in the markup.
         * @return {?}
         */
        function () {
            return this._pitch || this._config.pitch;
        },
        set: /**
         * @param {?} pitch
         * @return {?}
         */
        function (pitch) {
            this._pitch = pitch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "onstart", {
        /**
         * Fired when this utterance has begun to be spoken.
         */
        get: /**
         * Fired when this utterance has begun to be spoken.
         * @return {?}
         */
        function () {
            return this._onstart || this._config.onstart;
        },
        set: /**
         * @param {?} onstart
         * @return {?}
         */
        function (onstart) {
            this._onstart = onstart;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "onend", {
        /**
         * Fired when this utterance has completed being spoken. If this event fires,
         * the error event must not be fired for this utterance.
         */
        get: /**
         * Fired when this utterance has completed being spoken. If this event fires,
         * the error event must not be fired for this utterance.
         * @return {?}
         */
        function () {
            return this._onend || this._config.onend;
        },
        set: /**
         * @param {?} onend
         * @return {?}
         */
        function (onend) {
            this._onend = onend;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "onerror", {
        /**
         * Fired if there was an error that prevented successful speaking of this utterance.
         * If this event fires, the end event must not be fired for this utterance.
         */
        get: /**
         * Fired if there was an error that prevented successful speaking of this utterance.
         * If this event fires, the end event must not be fired for this utterance.
         * @return {?}
         */
        function () {
            return this._onerror || this._config.onerror;
        },
        set: /**
         * @param {?} onerror
         * @return {?}
         */
        function (onerror) {
            this._onerror = onerror;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "onpause", {
        /**
         * Fired when and if this utterance is paused mid-utterance.
         */
        get: /**
         * Fired when and if this utterance is paused mid-utterance.
         * @return {?}
         */
        function () {
            return this._onpause || this._config.onpause;
        },
        set: /**
         * @param {?} onpause
         * @return {?}
         */
        function (onpause) {
            this._onpause = onpause;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "onresume", {
        /**
         * Fired when and if this utterance is resumed after being paused mid-utterance.
         * Adding the utterance to the queue while the global SpeechSynthesis instance is in the paused state,
         * and then calling the resume method does not cause the resume event to be fired,
         * in this case the utteranceâ€™s start event will be called when the utterance starts.
         */
        get: /**
         * Fired when and if this utterance is resumed after being paused mid-utterance.
         * Adding the utterance to the queue while the global SpeechSynthesis instance is in the paused state,
         * and then calling the resume method does not cause the resume event to be fired,
         * in this case the utteranceâ€™s start event will be called when the utterance starts.
         * @return {?}
         */
        function () {
            return this._onresume || this._config.onresume;
        },
        set: /**
         * @param {?} onresume
         * @return {?}
         */
        function (onresume) {
            this._onresume = onresume;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "onmark", {
        /**
         * Fired when the spoken utterance reaches a named "mark" tag in SSML.
         * [SSML] The user agent must fire this event if the speech synthesis engine provides the event.
         */
        get: /**
         * Fired when the spoken utterance reaches a named "mark" tag in SSML.
         * [SSML] The user agent must fire this event if the speech synthesis engine provides the event.
         * @return {?}
         */
        function () {
            return this._onmark || this._config.onmark;
        },
        set: /**
         * @param {?} onmark
         * @return {?}
         */
        function (onmark) {
            this._onmark = onmark;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisUtteranceFactoryService.prototype, "onboundary", {
        /**
         * Fired when the spoken utterance reaches a word or sentence boundary.
         * The user agent must fire this event if the speech synthesis engine provides the event.
         */
        get: /**
         * Fired when the spoken utterance reaches a word or sentence boundary.
         * The user agent must fire this event if the speech synthesis engine provides the event.
         * @return {?}
         */
        function () {
            return this._onboundary || this._config.onboundary;
        },
        set: /**
         * @param {?} onboundary
         * @return {?}
         */
        function (onboundary) {
            this._onboundary = onboundary;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This attribute specifies the text to be synthesized and spoken for this utterance.
     * This may be either plain text or a complete, well-formed SSML document.
     * [SSML] For speech synthesis engines that do not support SSML,
     * or only support certain tags, the user agent or speech engine must strip away
     * the tags they do not support and speak the text. There may be a maximum length of the text,
     * it may be limited to 32,767 characters.
     */
    /**
     * This attribute specifies the text to be synthesized and spoken for this utterance.
     * This may be either plain text or a complete, well-formed SSML document.
     * [SSML] For speech synthesis engines that do not support SSML,
     * or only support certain tags, the user agent or speech engine must strip away
     * the tags they do not support and speak the text. There may be a maximum length of the text,
     * it may be limited to 32,767 characters.
     * @param {?} text
     * @return {?}
     */
    SpeechSynthesisUtteranceFactoryService.prototype.text = /**
     * This attribute specifies the text to be synthesized and spoken for this utterance.
     * This may be either plain text or a complete, well-formed SSML document.
     * [SSML] For speech synthesis engines that do not support SSML,
     * or only support certain tags, the user agent or speech engine must strip away
     * the tags they do not support and speak the text. There may be a maximum length of the text,
     * it may be limited to 32,767 characters.
     * @param {?} text
     * @return {?}
     */
    function (text) {
        /** @type {?} */
        var utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = this.lang;
        utterance.voice = this.voice;
        utterance.volume = this.volume;
        utterance.rate = this.rate;
        utterance.pitch = this.pitch;
        utterance.onstart = this.onstart;
        utterance.onend = this.onend;
        utterance.onerror = this.onerror;
        utterance.onpause = this.onpause;
        utterance.onresume = this.onresume;
        utterance.onmark = this.onmark;
        utterance.onboundary = this.onboundary;
        return utterance;
    };
    SpeechSynthesisUtteranceFactoryService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SpeechSynthesisUtteranceFactoryService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [Config,] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [Lang,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [Voice,] }] },
        { type: Number, decorators: [{ type: Optional }, { type: Inject, args: [Volume,] }] },
        { type: Number, decorators: [{ type: Optional }, { type: Inject, args: [Rate,] }] },
        { type: Number, decorators: [{ type: Optional }, { type: Inject, args: [Pitch,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OnStartHandler,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OnEndHandler,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OnErrorHandler,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OnPauseHandler,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OnResumeHandler,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OnMarkHandler,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OnBoundaryHandler,] }] }
    ]; };
    /** @nocollapse */ SpeechSynthesisUtteranceFactoryService.ngInjectableDef = i0.defineInjectable({ factory: function SpeechSynthesisUtteranceFactoryService_Factory() { return new SpeechSynthesisUtteranceFactoryService(i0.inject(i1.Config, 8), i0.inject(i1.Lang, 8), i0.inject(i1.Voice, 8), i0.inject(i1.Volume, 8), i0.inject(i1.Rate, 8), i0.inject(i1.Pitch, 8), i0.inject(i1.OnStartHandler, 8), i0.inject(i1.OnEndHandler, 8), i0.inject(i1.OnErrorHandler, 8), i0.inject(i1.OnPauseHandler, 8), i0.inject(i1.OnResumeHandler, 8), i0.inject(i1.OnMarkHandler, 8), i0.inject(i1.OnBoundaryHandler, 8)); }, token: SpeechSynthesisUtteranceFactoryService, providedIn: "root" });
    return SpeechSynthesisUtteranceFactoryService;
}());
export { SpeechSynthesisUtteranceFactoryService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._config;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._lang;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._voice;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._volume;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._rate;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._pitch;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._onstart;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._onend;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._onerror;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._onpause;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._onresume;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._onmark;
    /**
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype._onboundary;
    /**
     * If SpeechSynthesis API is supported
     * by the browser instance will be included.
     * @type {?}
     * @private
     */
    SpeechSynthesisUtteranceFactoryService.prototype.internal;
}
//# sourceMappingURL=data:application/json;base64,