/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var SpeechSynthesisService = /** @class */ (function () {
    function SpeechSynthesisService() {
        this.internal = window.speechSynthesis;
    }
    Object.defineProperty(SpeechSynthesisService.prototype, "pending", {
        /**
         * This attribute is true if the queue for
         * the global SpeechSynthesis instance contains any utterances
         * which have not started speaking.
         */
        get: /**
         * This attribute is true if the queue for
         * the global SpeechSynthesis instance contains any utterances
         * which have not started speaking.
         * @return {?}
         */
        function () {
            return this.internal.pending;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisService.prototype, "speaking", {
        /**
         * This attribute is true if an utterance is being spoken.
         * Specifically if an utterance has begun being spoken
         * and has not completed being spoken.
         * This is independent of whether the global SpeechSynthesis instance is
         * in the paused state.
         */
        get: /**
         * This attribute is true if an utterance is being spoken.
         * Specifically if an utterance has begun being spoken
         * and has not completed being spoken.
         * This is independent of whether the global SpeechSynthesis instance is
         * in the paused state.
         * @return {?}
         */
        function () {
            return this.internal.speaking;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisService.prototype, "paused", {
        /**
         * This attribute is true when the global SpeechSynthesis instance is
         * in the paused state.
         * This state is independent of whether anything is in the queue.
         * The default state of a the global SpeechSynthesis instance
         * for a new window is the non-paused state.
         */
        get: /**
         * This attribute is true when the global SpeechSynthesis instance is
         * in the paused state.
         * This state is independent of whether anything is in the queue.
         * The default state of a the global SpeechSynthesis instance
         * for a new window is the non-paused state.
         * @return {?}
         */
        function () {
            return this.internal.paused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechSynthesisService.prototype, "onvoiceschanged", {
        /**
         * Fired when the contents of the SpeechSynthesisVoiceList,
         * that the getVoices method will return, have changed.
         * Examples include: server-side synthesis where the list is determined asynchronously,
         * or when client-side voices are installed/uninstalled.
         */
        set: /**
         * Fired when the contents of the SpeechSynthesisVoiceList,
         * that the getVoices method will return, have changed.
         * Examples include: server-side synthesis where the list is determined asynchronously,
         * or when client-side voices are installed/uninstalled.
         * @param {?} handler
         * @return {?}
         */
        function (handler) {
            this.internal.onvoiceschanged = handler;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This method appends the SpeechSynthesisUtterance object utterance
     * to the end of the queue for the global SpeechSynthesis instance.
     * It does not change the paused state of the SpeechSynthesis instance.
     * If the SpeechSynthesis instance is paused, it remains paused.
     * If it is not paused and no other utterances are in the queue,
     * then this utterance is spoken immediately, else this utterance is queued
     * to begin speaking after the other utterances in the queue have been spoken.
     * If changes are made to the SpeechSynthesisUtterance object after calling
     * this method and prior to the corresponding end or error event,
     * it is not defined whether those changes will affect what is spoken,
     * and those changes may cause an error to be returned.
     * The SpeechSynthesis object takes exclusive ownership of the SpeechSynthesisUtterance object.
     * Passing it as a speak() argument to another SpeechSynthesis object should throw an exception.
     * (For example, two frames may have the same origin and each will contain a SpeechSynthesis object.)
     */
    /**
     * This method appends the SpeechSynthesisUtterance object utterance
     * to the end of the queue for the global SpeechSynthesis instance.
     * It does not change the paused state of the SpeechSynthesis instance.
     * If the SpeechSynthesis instance is paused, it remains paused.
     * If it is not paused and no other utterances are in the queue,
     * then this utterance is spoken immediately, else this utterance is queued
     * to begin speaking after the other utterances in the queue have been spoken.
     * If changes are made to the SpeechSynthesisUtterance object after calling
     * this method and prior to the corresponding end or error event,
     * it is not defined whether those changes will affect what is spoken,
     * and those changes may cause an error to be returned.
     * The SpeechSynthesis object takes exclusive ownership of the SpeechSynthesisUtterance object.
     * Passing it as a speak() argument to another SpeechSynthesis object should throw an exception.
     * (For example, two frames may have the same origin and each will contain a SpeechSynthesis object.)
     * @param {?} utterance
     * @return {?}
     */
    SpeechSynthesisService.prototype.speak = /**
     * This method appends the SpeechSynthesisUtterance object utterance
     * to the end of the queue for the global SpeechSynthesis instance.
     * It does not change the paused state of the SpeechSynthesis instance.
     * If the SpeechSynthesis instance is paused, it remains paused.
     * If it is not paused and no other utterances are in the queue,
     * then this utterance is spoken immediately, else this utterance is queued
     * to begin speaking after the other utterances in the queue have been spoken.
     * If changes are made to the SpeechSynthesisUtterance object after calling
     * this method and prior to the corresponding end or error event,
     * it is not defined whether those changes will affect what is spoken,
     * and those changes may cause an error to be returned.
     * The SpeechSynthesis object takes exclusive ownership of the SpeechSynthesisUtterance object.
     * Passing it as a speak() argument to another SpeechSynthesis object should throw an exception.
     * (For example, two frames may have the same origin and each will contain a SpeechSynthesis object.)
     * @param {?} utterance
     * @return {?}
     */
    function (utterance) {
        this.internal.speak(utterance);
    };
    /**
     * This method removes all utterances from the queue.
     * If an utterance is being spoken, speaking ceases immediately.
     * This method does not change the paused state of the global SpeechSynthesis instance.
     */
    /**
     * This method removes all utterances from the queue.
     * If an utterance is being spoken, speaking ceases immediately.
     * This method does not change the paused state of the global SpeechSynthesis instance.
     * @return {?}
     */
    SpeechSynthesisService.prototype.cancel = /**
     * This method removes all utterances from the queue.
     * If an utterance is being spoken, speaking ceases immediately.
     * This method does not change the paused state of the global SpeechSynthesis instance.
     * @return {?}
     */
    function () {
        this.internal.cancel();
    };
    /**
     * This method puts the global SpeechSynthesis instance into the paused state.
     * If an utterance was being spoken, it pauses mid-utterance.
     * (If called when the SpeechSynthesis instance was already in the paused state, it does nothing.)
     */
    /**
     * This method puts the global SpeechSynthesis instance into the paused state.
     * If an utterance was being spoken, it pauses mid-utterance.
     * (If called when the SpeechSynthesis instance was already in the paused state, it does nothing.)
     * @return {?}
     */
    SpeechSynthesisService.prototype.pause = /**
     * This method puts the global SpeechSynthesis instance into the paused state.
     * If an utterance was being spoken, it pauses mid-utterance.
     * (If called when the SpeechSynthesis instance was already in the paused state, it does nothing.)
     * @return {?}
     */
    function () {
        this.internal.pause();
    };
    /**
     * This method puts the global SpeechSynthesis instance into the non-paused state.
     * If an utterance was speaking, it continues speaking the utterance
     * at the point at which it was paused, else it begins speaking
     * the next utterance in the queue (if any).
     * (If called when the SpeechSynthesis instance was already in the non-paused state, it does nothing.)
     */
    /**
     * This method puts the global SpeechSynthesis instance into the non-paused state.
     * If an utterance was speaking, it continues speaking the utterance
     * at the point at which it was paused, else it begins speaking
     * the next utterance in the queue (if any).
     * (If called when the SpeechSynthesis instance was already in the non-paused state, it does nothing.)
     * @return {?}
     */
    SpeechSynthesisService.prototype.resume = /**
     * This method puts the global SpeechSynthesis instance into the non-paused state.
     * If an utterance was speaking, it continues speaking the utterance
     * at the point at which it was paused, else it begins speaking
     * the next utterance in the queue (if any).
     * (If called when the SpeechSynthesis instance was already in the non-paused state, it does nothing.)
     * @return {?}
     */
    function () {
        this.internal.resume();
    };
    /**
     * This method returns the available voices.
     * It is user agent dependent which voices are available.
     * If there are no voices available, or if the the list of available voices
     * is not yet known (for example: server-side synthesis where the list is determined asynchronously),
     * then this method must return a SpeechSynthesisVoiceList of length zero.
     */
    /**
     * This method returns the available voices.
     * It is user agent dependent which voices are available.
     * If there are no voices available, or if the the list of available voices
     * is not yet known (for example: server-side synthesis where the list is determined asynchronously),
     * then this method must return a SpeechSynthesisVoiceList of length zero.
     * @return {?}
     */
    SpeechSynthesisService.prototype.getVoices = /**
     * This method returns the available voices.
     * It is user agent dependent which voices are available.
     * If there are no voices available, or if the the list of available voices
     * is not yet known (for example: server-side synthesis where the list is determined asynchronously),
     * then this method must return a SpeechSynthesisVoiceList of length zero.
     * @return {?}
     */
    function () {
        return this.internal.getVoices();
    };
    SpeechSynthesisService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SpeechSynthesisService.ctorParameters = function () { return []; };
    /** @nocollapse */ SpeechSynthesisService.ngInjectableDef = i0.defineInjectable({ factory: function SpeechSynthesisService_Factory() { return new SpeechSynthesisService(); }, token: SpeechSynthesisService, providedIn: "root" });
    return SpeechSynthesisService;
}());
export { SpeechSynthesisService };
if (false) {
    /**
     * If SpeechSynthesis API is supported
     * by the browser instance will be included.
     * @type {?}
     * @private
     */
    SpeechSynthesisService.prototype.internal;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWNoLXN5bnRoZXNpcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGthbWlhenlhL25neC1zcGVlY2gtc3ludGhlc2lzLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NwZWVjaC1zeW50aGVzaXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFJM0M7SUFXRTtRQUNFLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQztJQUN6QyxDQUFDO0lBUUQsc0JBQUksMkNBQU87UUFMWDs7OztXQUlHOzs7Ozs7O1FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQy9CLENBQUM7OztPQUFBO0lBU0Qsc0JBQUksNENBQVE7UUFQWjs7Ozs7O1dBTUc7Ozs7Ozs7OztRQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNoQyxDQUFDOzs7T0FBQTtJQVNELHNCQUFJLDBDQUFNO1FBUFY7Ozs7OztXQU1HOzs7Ozs7Ozs7UUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDOUIsQ0FBQzs7O09BQUE7SUFRRCxzQkFBSSxtREFBZTtRQU5uQjs7Ozs7V0FLRzs7Ozs7Ozs7O1FBQ0gsVUFBb0IsT0FBa0M7WUFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDO1FBQzFDLENBQUM7OztPQUFBO0lBRUQ7Ozs7Ozs7Ozs7Ozs7OztPQWVHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBQ0ksc0NBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUFaLFVBQWEsU0FBbUM7UUFDOUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7SUFDSSx1Q0FBTTs7Ozs7O0lBQWI7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ0ksc0NBQUs7Ozs7OztJQUFaO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQ7Ozs7OztPQU1HOzs7Ozs7Ozs7SUFDSSx1Q0FBTTs7Ozs7Ozs7SUFBYjtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7Ozs7T0FNRzs7Ozs7Ozs7O0lBQ0ksMENBQVM7Ozs7Ozs7O0lBQWhCO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ25DLENBQUM7O2dCQW5IRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7OztpQ0FORDtDQXdIQyxBQXBIRCxJQW9IQztTQWpIWSxzQkFBc0I7Ozs7Ozs7O0lBTWpDLDBDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxudHlwZSBWb2ljZXNDaGFuZ2VkRXZlbnRIYW5kbGVyID0gKCh0aGlzOiBTcGVlY2hTeW50aGVzaXMsIGV2OiBFdmVudCkgPT4gYW55KSB8IG51bGw7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNwZWVjaFN5bnRoZXNpc1NlcnZpY2Uge1xuXG4gIC8qKlxuICAgKiBJZiBTcGVlY2hTeW50aGVzaXMgQVBJIGlzIHN1cHBvcnRlZFxuICAgKiBieSB0aGUgYnJvd3NlciBpbnN0YW5jZSB3aWxsIGJlIGluY2x1ZGVkLlxuICAgKi9cbiAgcHJpdmF0ZSBpbnRlcm5hbDogU3BlZWNoU3ludGhlc2lzO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW50ZXJuYWwgPSB3aW5kb3cuc3BlZWNoU3ludGhlc2lzO1xuICB9XG5cblxuICAvKipcbiAgICogVGhpcyBhdHRyaWJ1dGUgaXMgdHJ1ZSBpZiB0aGUgcXVldWUgZm9yXG4gICAqIHRoZSBnbG9iYWwgU3BlZWNoU3ludGhlc2lzIGluc3RhbmNlIGNvbnRhaW5zIGFueSB1dHRlcmFuY2VzXG4gICAqIHdoaWNoIGhhdmUgbm90IHN0YXJ0ZWQgc3BlYWtpbmcuXG4gICAqL1xuICBnZXQgcGVuZGluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcm5hbC5wZW5kaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgYXR0cmlidXRlIGlzIHRydWUgaWYgYW4gdXR0ZXJhbmNlIGlzIGJlaW5nIHNwb2tlbi5cbiAgICogU3BlY2lmaWNhbGx5IGlmIGFuIHV0dGVyYW5jZSBoYXMgYmVndW4gYmVpbmcgc3Bva2VuXG4gICAqIGFuZCBoYXMgbm90IGNvbXBsZXRlZCBiZWluZyBzcG9rZW4uXG4gICAqIFRoaXMgaXMgaW5kZXBlbmRlbnQgb2Ygd2hldGhlciB0aGUgZ2xvYmFsIFNwZWVjaFN5bnRoZXNpcyBpbnN0YW5jZSBpc1xuICAgKiBpbiB0aGUgcGF1c2VkIHN0YXRlLlxuICAgKi9cbiAgZ2V0IHNwZWFraW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmludGVybmFsLnNwZWFraW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgYXR0cmlidXRlIGlzIHRydWUgd2hlbiB0aGUgZ2xvYmFsIFNwZWVjaFN5bnRoZXNpcyBpbnN0YW5jZSBpc1xuICAgKiBpbiB0aGUgcGF1c2VkIHN0YXRlLlxuICAgKiBUaGlzIHN0YXRlIGlzIGluZGVwZW5kZW50IG9mIHdoZXRoZXIgYW55dGhpbmcgaXMgaW4gdGhlIHF1ZXVlLlxuICAgKiBUaGUgZGVmYXVsdCBzdGF0ZSBvZiBhIHRoZSBnbG9iYWwgU3BlZWNoU3ludGhlc2lzIGluc3RhbmNlXG4gICAqIGZvciBhIG5ldyB3aW5kb3cgaXMgdGhlIG5vbi1wYXVzZWQgc3RhdGUuXG4gICAqL1xuICBnZXQgcGF1c2VkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmludGVybmFsLnBhdXNlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIHRoZSBjb250ZW50cyBvZiB0aGUgU3BlZWNoU3ludGhlc2lzVm9pY2VMaXN0LFxuICAgKiB0aGF0IHRoZSBnZXRWb2ljZXMgbWV0aG9kIHdpbGwgcmV0dXJuLCBoYXZlIGNoYW5nZWQuXG4gICAqIEV4YW1wbGVzIGluY2x1ZGU6IHNlcnZlci1zaWRlIHN5bnRoZXNpcyB3aGVyZSB0aGUgbGlzdCBpcyBkZXRlcm1pbmVkIGFzeW5jaHJvbm91c2x5LFxuICAgKiBvciB3aGVuIGNsaWVudC1zaWRlIHZvaWNlcyBhcmUgaW5zdGFsbGVkL3VuaW5zdGFsbGVkLlxuICAgKi9cbiAgc2V0IG9udm9pY2VzY2hhbmdlZChoYW5kbGVyOiBWb2ljZXNDaGFuZ2VkRXZlbnRIYW5kbGVyKSB7XG4gICAgdGhpcy5pbnRlcm5hbC5vbnZvaWNlc2NoYW5nZWQgPSBoYW5kbGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGFwcGVuZHMgdGhlIFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSBvYmplY3QgdXR0ZXJhbmNlXG4gICAqIHRvIHRoZSBlbmQgb2YgdGhlIHF1ZXVlIGZvciB0aGUgZ2xvYmFsIFNwZWVjaFN5bnRoZXNpcyBpbnN0YW5jZS5cbiAgICogSXQgZG9lcyBub3QgY2hhbmdlIHRoZSBwYXVzZWQgc3RhdGUgb2YgdGhlIFNwZWVjaFN5bnRoZXNpcyBpbnN0YW5jZS5cbiAgICogSWYgdGhlIFNwZWVjaFN5bnRoZXNpcyBpbnN0YW5jZSBpcyBwYXVzZWQsIGl0IHJlbWFpbnMgcGF1c2VkLlxuICAgKiBJZiBpdCBpcyBub3QgcGF1c2VkIGFuZCBubyBvdGhlciB1dHRlcmFuY2VzIGFyZSBpbiB0aGUgcXVldWUsXG4gICAqIHRoZW4gdGhpcyB1dHRlcmFuY2UgaXMgc3Bva2VuIGltbWVkaWF0ZWx5LCBlbHNlIHRoaXMgdXR0ZXJhbmNlIGlzIHF1ZXVlZFxuICAgKiB0byBiZWdpbiBzcGVha2luZyBhZnRlciB0aGUgb3RoZXIgdXR0ZXJhbmNlcyBpbiB0aGUgcXVldWUgaGF2ZSBiZWVuIHNwb2tlbi5cbiAgICogSWYgY2hhbmdlcyBhcmUgbWFkZSB0byB0aGUgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlIG9iamVjdCBhZnRlciBjYWxsaW5nXG4gICAqIHRoaXMgbWV0aG9kIGFuZCBwcmlvciB0byB0aGUgY29ycmVzcG9uZGluZyBlbmQgb3IgZXJyb3IgZXZlbnQsXG4gICAqIGl0IGlzIG5vdCBkZWZpbmVkIHdoZXRoZXIgdGhvc2UgY2hhbmdlcyB3aWxsIGFmZmVjdCB3aGF0IGlzIHNwb2tlbixcbiAgICogYW5kIHRob3NlIGNoYW5nZXMgbWF5IGNhdXNlIGFuIGVycm9yIHRvIGJlIHJldHVybmVkLlxuICAgKiBUaGUgU3BlZWNoU3ludGhlc2lzIG9iamVjdCB0YWtlcyBleGNsdXNpdmUgb3duZXJzaGlwIG9mIHRoZSBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2Ugb2JqZWN0LlxuICAgKiBQYXNzaW5nIGl0IGFzIGEgc3BlYWsoKSBhcmd1bWVudCB0byBhbm90aGVyIFNwZWVjaFN5bnRoZXNpcyBvYmplY3Qgc2hvdWxkIHRocm93IGFuIGV4Y2VwdGlvbi5cbiAgICogKEZvciBleGFtcGxlLCB0d28gZnJhbWVzIG1heSBoYXZlIHRoZSBzYW1lIG9yaWdpbiBhbmQgZWFjaCB3aWxsIGNvbnRhaW4gYSBTcGVlY2hTeW50aGVzaXMgb2JqZWN0LilcbiAgICovXG4gIHB1YmxpYyBzcGVhayh1dHRlcmFuY2U6IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSk6IHZvaWQge1xuICAgIHRoaXMuaW50ZXJuYWwuc3BlYWsodXR0ZXJhbmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCByZW1vdmVzIGFsbCB1dHRlcmFuY2VzIGZyb20gdGhlIHF1ZXVlLlxuICAgKiBJZiBhbiB1dHRlcmFuY2UgaXMgYmVpbmcgc3Bva2VuLCBzcGVha2luZyBjZWFzZXMgaW1tZWRpYXRlbHkuXG4gICAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IGNoYW5nZSB0aGUgcGF1c2VkIHN0YXRlIG9mIHRoZSBnbG9iYWwgU3BlZWNoU3ludGhlc2lzIGluc3RhbmNlLlxuICAgKi9cbiAgcHVibGljIGNhbmNlbCgpOiB2b2lkIHtcbiAgICB0aGlzLmludGVybmFsLmNhbmNlbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHB1dHMgdGhlIGdsb2JhbCBTcGVlY2hTeW50aGVzaXMgaW5zdGFuY2UgaW50byB0aGUgcGF1c2VkIHN0YXRlLlxuICAgKiBJZiBhbiB1dHRlcmFuY2Ugd2FzIGJlaW5nIHNwb2tlbiwgaXQgcGF1c2VzIG1pZC11dHRlcmFuY2UuXG4gICAqIChJZiBjYWxsZWQgd2hlbiB0aGUgU3BlZWNoU3ludGhlc2lzIGluc3RhbmNlIHdhcyBhbHJlYWR5IGluIHRoZSBwYXVzZWQgc3RhdGUsIGl0IGRvZXMgbm90aGluZy4pXG4gICAqL1xuICBwdWJsaWMgcGF1c2UoKTogdm9pZCB7XG4gICAgdGhpcy5pbnRlcm5hbC5wYXVzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHB1dHMgdGhlIGdsb2JhbCBTcGVlY2hTeW50aGVzaXMgaW5zdGFuY2UgaW50byB0aGUgbm9uLXBhdXNlZCBzdGF0ZS5cbiAgICogSWYgYW4gdXR0ZXJhbmNlIHdhcyBzcGVha2luZywgaXQgY29udGludWVzIHNwZWFraW5nIHRoZSB1dHRlcmFuY2VcbiAgICogYXQgdGhlIHBvaW50IGF0IHdoaWNoIGl0IHdhcyBwYXVzZWQsIGVsc2UgaXQgYmVnaW5zIHNwZWFraW5nXG4gICAqIHRoZSBuZXh0IHV0dGVyYW5jZSBpbiB0aGUgcXVldWUgKGlmIGFueSkuXG4gICAqIChJZiBjYWxsZWQgd2hlbiB0aGUgU3BlZWNoU3ludGhlc2lzIGluc3RhbmNlIHdhcyBhbHJlYWR5IGluIHRoZSBub24tcGF1c2VkIHN0YXRlLCBpdCBkb2VzIG5vdGhpbmcuKVxuICAgKi9cbiAgcHVibGljIHJlc3VtZSgpOiB2b2lkIHtcbiAgICB0aGlzLmludGVybmFsLnJlc3VtZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGF2YWlsYWJsZSB2b2ljZXMuXG4gICAqIEl0IGlzIHVzZXIgYWdlbnQgZGVwZW5kZW50IHdoaWNoIHZvaWNlcyBhcmUgYXZhaWxhYmxlLlxuICAgKiBJZiB0aGVyZSBhcmUgbm8gdm9pY2VzIGF2YWlsYWJsZSwgb3IgaWYgdGhlIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSB2b2ljZXNcbiAgICogaXMgbm90IHlldCBrbm93biAoZm9yIGV4YW1wbGU6IHNlcnZlci1zaWRlIHN5bnRoZXNpcyB3aGVyZSB0aGUgbGlzdCBpcyBkZXRlcm1pbmVkIGFzeW5jaHJvbm91c2x5KSxcbiAgICogdGhlbiB0aGlzIG1ldGhvZCBtdXN0IHJldHVybiBhIFNwZWVjaFN5bnRoZXNpc1ZvaWNlTGlzdCBvZiBsZW5ndGggemVyby5cbiAgICovXG4gIHB1YmxpYyBnZXRWb2ljZXMoKTogU3BlZWNoU3ludGhlc2lzVm9pY2VbXSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJuYWwuZ2V0Vm9pY2VzKCk7XG4gIH1cbn1cbiJdfQ==